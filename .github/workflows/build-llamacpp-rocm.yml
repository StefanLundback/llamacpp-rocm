name: Build Llama.cpp + ROCm
on:
  workflow_dispatch:
    inputs:
      gfx_target:
        description: 'AMD GPU targets (comma-separated)'
        required: false
        default: 'gfx1151,gfx120X,gfx110X'
      rocm_version:
        description: 'ROCm version to use (e.g., 7.0.0rc20250711) or "latest" to auto-detect'
        required: false
        default: 'latest'
      llamacpp_version:
        description: 'Llama.cpp version (e.g., tag, branch, or commit hash) or "latest" for main branch'
        required: false
        default: 'latest'
      create_release:
        description: 'Create a GitHub release after successful build'
        required: false
        default: true
        type: boolean

  # Trigger on a schedule to build nightly releases
  schedule:
    # Runs at 1:00 PM UTC, which is 5:00 AM PST (UTC-8)
    # This is two hours after the ROCm nightly tarball is triggered
    - cron: '0 13 * * *'

env:
  HIP_PATH: C:/opt/rocm
  HIP_PLATFORM: amd
  GFX_TARGETS: ${{ github.event.inputs.gfx_target || 'gfx1151,gfx1201' }}
  ROCM_VERSION: ${{ github.event.inputs.rocm_version || 'latest' }}
  LLAMACPP_VERSION: ${{ github.event.inputs.llamacpp_version || 'latest' }}

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Set matrix
      id: set-matrix
      run: |
        targets="${{ env.GFX_TARGETS }}"
        echo "Input targets: $targets"

        # Convert to JSON array and compact into matrix
        matrix_output=$(echo "$targets" \
          | tr ',' '\n' \
          | sed 's/^ *//;s/ *$//' \
          | sed 's/^"//;s/"$//' \
          | jq -R . \
          | jq -s '{gfx_target: .}' \
          | jq -c)

        echo "matrix=$matrix_output" >> $GITHUB_OUTPUT
        echo "Generated matrix: $matrix_output"

  build:
    runs-on: windows-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
      fail-fast: false
    outputs:
      rocm_version: ${{ steps.set-outputs.outputs.rocm_version }}
      llamacpp_commit_hash: ${{ steps.set-outputs.outputs.llamacpp_commit_hash }}

    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Clean up existing directories (safety precaution)
      run: |
        # Remove existing llama.cpp directory if it exists
        if (Test-Path "llama.cpp") {
          Write-Host "Removing existing llama.cpp directory..."
          Remove-Item -Recurse -Force "llama.cpp"
        }
        
        # Remove existing C:\opt\rocm directory if it exists
        if (Test-Path "C:\opt\rocm") {
          Write-Host "Removing existing C:\opt\rocm directory..."
          Remove-Item -Recurse -Force "C:\opt\rocm"
        }
        
        # Remove any existing ROCm tarball
        if (Test-Path "rocm.tar.gz") {
          Write-Host "Removing existing rocm.tar.gz..."
          Remove-Item -Force "rocm.tar.gz"
        }
        
        Write-Host "Cleanup completed successfully"

    - name: Install Visual Studio Build Tools
      run: |
        # Download and install Visual Studio Build Tools
        $vsInstallerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
        $vsInstallerPath = "$env:TEMP\vs_buildtools.exe"
        
        Write-Host "Downloading Visual Studio Build Tools..."
        Invoke-WebRequest -Uri $vsInstallerUrl -OutFile $vsInstallerPath
        
        Write-Host "Installing Visual Studio Build Tools..."
        Start-Process -FilePath $vsInstallerPath -ArgumentList "--quiet", "--wait", "--norestart", "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "--add", "Microsoft.VisualStudio.Component.VC.CMake.Project", "--add", "Microsoft.VisualStudio.Component.VC.ATL", "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22621" -Wait
        
        # Clean up installer
        Remove-Item $vsInstallerPath -Force

    - name: Install build dependencies
      run: |
        Write-Host "Installing build dependencies using manual methods..."
        
        # Install Ninja
        Write-Host "Installing Ninja..."
        $ninjaUrl = "https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip"
        $ninjaPath = "$env:TEMP\ninja-win.zip"
        $ninjaDir = "C:\ninja"
        New-Item -ItemType Directory -Force -Path $ninjaDir
        Invoke-WebRequest -Uri $ninjaUrl -OutFile $ninjaPath
        Expand-Archive -Path $ninjaPath -DestinationPath $ninjaDir -Force
        
        # Install Strawberry Perl
        Write-Host "Installing Strawberry Perl..."
        $perlUrl = "http://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit.msi"
        $perlPath = "$env:TEMP\strawberry-perl-5.32.1.1-64bit.msi"
        Invoke-WebRequest -Uri $perlUrl -OutFile $perlPath
        Start-Process msiexec.exe -ArgumentList "/i $perlPath /quiet /norestart" -Wait
        
        # Verify installations
        $env:PATH = "C:\ninja;C:\Strawberry\perl\bin;$env:PATH"
        Write-Host "Verifying installations..."
        ninja --version
        perl --version

        Write-Host "Manual installation of build dependencies completed"
            
    - name: Download ROCm nightly tarball
      run: |
        # Determine ROCm version to use
        $rocmVersion = "${{ env.ROCM_VERSION }}"
        $currentTarget = "${{ matrix.gfx_target }}"
        
        # Add appropriate suffixes for different GPU targets
        $s3Target = $currentTarget
        if ($currentTarget -eq "gfx110X") {
          $s3Target = "$currentTarget-dgpu"
          Write-Host "Using S3 target with -dgpu suffix: $s3Target"
        } elseif ($currentTarget -eq "gfx120X") {
          $s3Target = "$currentTarget-all"
          Write-Host "Using S3 target with -all suffix: $s3Target"
        }
        
        if ($rocmVersion -eq "latest") {
          Write-Host "Auto-detecting latest ROCm version for target: $currentTarget"
          $s3Response = (Invoke-WebRequest "https://therock-nightly-tarball.s3.amazonaws.com/?prefix=therock-dist-windows-$s3Target-").Content
          $latestFile = $s3Response -split '<Key>' | Where-Object {$_ -match '</Key>'} | ForEach-Object { ($_ -split '</Key>')[0] } | Sort-Object | Select-Object -Last 1
          
          Write-Host "Found latest file: $latestFile"
          
          # Extract version from the filename for environment variable
          if ($latestFile -match "therock-dist-windows-$s3Target-.*?(\d+\.\d+\.\d+rc\d+)\.tar\.gz") {
            $rocmVersion = $matches[1]
            Write-Host "Detected latest ROCm version: $rocmVersion"
          } else {
            Write-Error "Failed to extract ROCm version from latest file: $latestFile"
            Write-Error "Expected pattern: therock-dist-windows-$s3Target-*<version>.tar.gz"
            exit 1
          }
          
          # Use the exact filename from S3 instead of reconstructing
          $rocmUrl = "https://therock-nightly-tarball.s3.amazonaws.com/$latestFile"
        } else {
          # For specific versions, construct the URL as before
          $rocmUrl = "https://therock-nightly-tarball.s3.amazonaws.com/therock-dist-windows-$s3Target-$rocmVersion.tar.gz"
        }
        
        # Store the version for use in other steps
        echo "DETECTED_ROCM_VERSION=$rocmVersion" >> $env:GITHUB_ENV
        
        Write-Host "Downloading ROCm from: $rocmUrl"
        Invoke-WebRequest -Uri $rocmUrl -OutFile "rocm.tar.gz"
        
    - name: Extract ROCm to C:\opt\rocm
      run: |
        # Create directory if it doesn't exist
        New-Item -ItemType Directory -Force -Path "C:\opt\rocm"
        
        # Extract the tarball
        tar -xzf rocm.tar.gz -C C:\opt\rocm --strip-components=1
        
    - name: Clone llama.cpp
      run: |
        git clone https://github.com/ggerganov/llama.cpp.git
        cd llama.cpp
        
        # Checkout specified version
        $llamacppVersion = "${{ env.LLAMACPP_VERSION }}"
        if ($llamacppVersion -eq "latest") {
          Write-Host "Checking out main branch (latest)"
          git checkout main
        } else {
          Write-Host "Checking out llama.cpp version: $llamacppVersion"
          git checkout $llamacppVersion
        }
        
        # Get commit hash (5 digits) and store it as environment variable
        $commitHash = git rev-parse --short=5 HEAD
        echo "LLAMACPP_COMMIT_HASH=$commitHash" >> $env:GITHUB_ENV
        Write-Host "llama.cpp commit hash (5 digits): $commitHash"
        
        # Show current commit info
        Write-Host "Current llama.cpp commit:"
        git log --oneline -1
        
    - name: Update HIP version check
      run: |
        cd llama.cpp
        $hipFile = "ggml\src\ggml-cuda\vendors\hip.h"
        if (Test-Path $hipFile) {
          $content = Get-Content $hipFile -Raw
          $updatedContent = $content -replace 'HIP_VERSION >= 70000000', 'HIP_VERSION >= 50600000'
          Set-Content $hipFile $updatedContent -NoNewline
          Write-Host "Updated HIP version check in $hipFile"
        } else {
          Write-Host "Warning: $hipFile not found"
        }
        
    - name: Build Llama.cpp + ROCm
      shell: cmd
      run: |

        REM Set up environment variables and PATH
        set HIP_PATH=C:\opt\rocm
        set HIP_PLATFORM=amd
        set PATH=%HIP_PATH%\lib\llvm\bin;%HIP_PATH%\bin;%PATH%

        REM Set up x64 Native Tools Command Prompt environment
        call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs_path.txt
        set /p VS_PATH=<vs_path.txt
        call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"

        REM Create build directory
        cd llama.cpp
        mkdir build
        cd build

        REM Configure the project
        cmake .. -G Ninja ^
          -DCMAKE_C_COMPILER="C:\opt\rocm\lib\llvm\bin\clang.exe" ^
          -DCMAKE_CXX_COMPILER="C:\opt\rocm\lib\llvm\bin\clang++.exe" ^
          -DCMAKE_CROSSCOMPILING=ON ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DAMDGPU_TARGETS="${{ matrix.gfx_target }}" ^
          -DBUILD_SHARED_LIBS=ON ^
          -DLLAMA_BUILD_TESTS=OFF ^
          -DGGML_HIP=ON ^
          -DGGML_OPENMP=OFF ^
          -DGGML_CUDA_FORCE_CUBLAS=OFF ^
          -DGGML_HIP_ROCWMMA_FATTN=OFF ^
          -DGGML_HIP_FORCE_ROCWMMA_FATTN_GFX12=OFF ^
          -DLLAMA_CURL=OFF ^
          -DGGML_NATIVE=OFF ^
          -DGGML_STATIC=OFF ^
          -DCMAKE_SYSTEM_NAME=Windows

        REM Build the project
        cmake --build . -j %NUMBER_OF_PROCESSORS%
        
    - name: Copy ROCm core DLLs to build directory
      run: |
        $rocmVersion = if ($env:DETECTED_ROCM_VERSION) { $env:DETECTED_ROCM_VERSION } else { $env:ROCM_VERSION }
        $buildBinPath = "llama.cpp\build\bin"
        $rocmBinPath = "C:\opt\rocm\bin"
        
        Write-Host "Copying ROCm core DLL files to build directory..."
        Write-Host "Source: $rocmBinPath"
        Write-Host "Destination: $buildBinPath"
        
        if (Test-Path $rocmBinPath) {
          # Copy files matching patterns and specific names
          $filesToCopy = @(
            "amdhip64_*.dll",
            "amd_comgr*.dll", 
            "libhipblas.dll",
            "rocblas.dll",
            "rocsolver.dll"
          )
          
          foreach ($pattern in $filesToCopy) {
            $matchingFiles = Get-ChildItem -Path $rocmBinPath -Name $pattern -ErrorAction SilentlyContinue
            if ($matchingFiles) {
              foreach ($file in $matchingFiles) {
                $sourcePath = Join-Path $rocmBinPath $file
                $destPath = Join-Path $buildBinPath $file
                Copy-Item $sourcePath $destPath
                Write-Host "Copied: $file"
              }
            } else {
              Write-Host "Warning: No files found matching pattern: $pattern"
            }
          }
          
          # Copy the rocblas\library folder and all its contents
          $rocblasLibPath = Join-Path $rocmBinPath "rocblas\library"
          if (Test-Path $rocblasLibPath) {
            Write-Host "Copying rocblas\library folder and all contents..."
            $destRocblasPath = Join-Path $buildBinPath "rocblas\library"
            Copy-Item -Path $rocblasLibPath -Destination $destRocblasPath -Recurse -Force
            Write-Host "Copied: rocblas\library folder with all contents"
            
            # List the contents of the copied rocblas\library folder
            Write-Host "Contents of rocblas\library:"
            Get-ChildItem $destRocblasPath -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          } else {
            Write-Host "Warning: rocblas\library folder not found at: $rocblasLibPath"
          }
          
          Write-Host "ROCm core files successfully copied to build directory"
        } else {
          Write-Error "ROCm bin directory not found: $rocmBinPath"
          exit 1
        }
        
    - name: List build artifacts (including ROCm files)
      run: |
        cd llama.cpp\build\bin
        Write-Host "Final build artifacts (including ROCm core files):"
        Get-ChildItem -Recurse | Format-Table Name, Length, LastWriteTime
        
    - name: Upload build artifacts
      id: upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: llama-${{ env.LLAMACPP_COMMIT_HASH }}-win-rocm-${{ matrix.gfx_target }}-x64
        path: llama.cpp/build/bin/
        retention-days: 30
        
    - name: Set job outputs
      id: set-outputs
      run: |
        Write-Host "Setting job outputs..."
        Write-Host "Current target: ${{ matrix.gfx_target }}"
        Write-Host "DETECTED_ROCM_VERSION: $env:DETECTED_ROCM_VERSION"
        Write-Host "ROCM_VERSION: $env:ROCM_VERSION"
        Write-Host "LLAMACPP_COMMIT_HASH: $env:LLAMACPP_COMMIT_HASH"
        
        $rocmVersion = if ($env:DETECTED_ROCM_VERSION) { $env:DETECTED_ROCM_VERSION } else { $env:ROCM_VERSION }
        echo "rocm_version=$rocmVersion" >> $env:GITHUB_OUTPUT
        echo "llamacpp_commit_hash=$env:LLAMACPP_COMMIT_HASH" >> $env:GITHUB_OUTPUT
        
        Write-Host "Final rocm_version: $rocmVersion"
        Write-Host "Final llamacpp_commit_hash: $env:LLAMACPP_COMMIT_HASH"
        
    - name: Create release summary
      run: |
        $summary = @"
        # Llama.cpp + ROCm Build Summary (${{ matrix.gfx_target }})
        
        ## Build Configuration
        - **GPU Target**: ${{ matrix.gfx_target }}
        - **ROCm Version**: ${{ env.DETECTED_ROCM_VERSION || env.ROCM_VERSION }}
        - **llama.cpp Commit Hash**: ${{ env.LLAMACPP_COMMIT_HASH }}
        - **Build Type**: Release
        - **Platform**: Windows
        
        ## Build Artifacts
        The compiled binaries are available in the build artifacts.

        "@
        
        Set-Content -Path "build-summary-${{ matrix.gfx_target }}.md" -Value $summary
        
    - name: Upload build summary
      id: upload-summary
      uses: actions/upload-artifact@v4
      with:
        name: build-summary-${{ matrix.gfx_target }}
        path: build-summary-${{ matrix.gfx_target }}.md
        retention-days: 30
        

        
    - name: Clean up build artifacts and temporary files
      if: always()
      run: |
        Write-Host "Starting cleanup process..."
        
        # Remove ROCm tarball
        if (Test-Path "rocm.tar.gz") {
          Write-Host "Removing rocm.tar.gz..."
          Remove-Item -Force "rocm.tar.gz"
        }
        
        # Remove ROCm installation directory
        if (Test-Path "C:\opt\rocm") {
          Write-Host "Removing C:\opt\rocm directory..."
          Remove-Item -Recurse -Force "C:\opt\rocm"
        }
        # Remove llama.cpp source directory (keeping only the build artifacts)
        if (Test-Path "llama.cpp") {
          Write-Host "Removing llama.cpp source directory..."
          Remove-Item -Recurse -Force "llama.cpp"
        }
        
        # Clean up any temporary build files
        if (Test-Path "build-summary-${{ matrix.gfx_target }}.md") {
          Write-Host "Removing build-summary-${{ matrix.gfx_target }}.md..."
          Remove-Item -Force "build-summary-${{ matrix.gfx_target }}.md"
        }
        
        Write-Host "Cleanup completed successfully"

  create-release:
    needs: [prepare-matrix, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.create_release == 'true' || github.event.inputs.create_release == null) ||
      github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./all-artifacts
        
    - name: Generate release tag
      id: generate-tag
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        # Get all existing release tags that match the pattern b####
        existing_tags=$(gh release list --limit 1000 --json tagName --jq '.[].tagName' | grep -E '^b[0-9]{4}$' | sort -V || echo "")
        
        if [ -z "$existing_tags" ]; then
          # No existing sequential tags found, start with b1000
          next_number=1000
          echo "No existing sequential release tags found, starting with b1000"
        else
          # Find the highest existing number
          highest_tag=$(echo "$existing_tags" | tail -n 1)
          highest_number=$(echo "$highest_tag" | sed 's/^b//')
          next_number=$((highest_number + 1))
          echo "Highest existing tag: $highest_tag (number: $highest_number)"
          echo "Next number will be: $next_number"
        fi
        
        # Format as b#### (4-digit number with leading zeros)
        TAG=$(printf "b%04d" $next_number)
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated release tag: ${TAG}"
        
    - name: Check if tag already exists
      id: check-tag
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        
        # Check if the tag already exists
        if git ls-remote --tags origin "$TAG" | grep -q "$TAG"; then
          echo "Tag $TAG already exists, skipping release creation"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Tag $TAG does not exist, proceeding with release creation"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create archives for all target artifacts
      if: steps.check-tag.outputs.tag_exists == 'false'
      run: |
        # Parse targets from environment
        targets="${{ env.GFX_TARGETS }}"
        LLAMACPP_COMMIT_HASH="${{ needs.build.outputs.llamacpp_commit_hash }}"
        
        echo "Processing targets: $targets"
        
        # Create individual archives for each target
        IFS=',' read -ra TARGET_ARRAY <<< "$targets"
        for target in "${TARGET_ARRAY[@]}"; do
          target=$(echo "$target" | xargs) # trim whitespace
          echo "Processing target: $target"
          
          artifact_name="llama-${LLAMACPP_COMMIT_HASH}-win-rocm-${target}-x64"
          artifact_dir="./all-artifacts/${artifact_name}"
          
          if [ -d "$artifact_dir" ]; then
            echo "Creating archive: ${artifact_name}.zip"
            cd "$artifact_dir"
            zip -r "../../${artifact_name}.zip" *
            cd ../../
          else
            echo "Warning: Artifact directory not found: $artifact_dir"
            ls -la ./all-artifacts/
          fi
        done
        
        echo "Created archives:"
        ls -la *.zip
        
    - name: Create Release
      if: steps.check-tag.outputs.tag_exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        ROCM_VERSION="${{ needs.build.outputs.rocm_version }}"
        LLAMACPP_COMMIT_HASH="${{ needs.build.outputs.llamacpp_commit_hash }}"
        targets="${{ env.GFX_TARGETS }}"
        
        echo "Creating release with tag: $TAG"
        echo "GPU Targets: $targets"
        echo "ROCm Version: $ROCM_VERSION"
        echo "Llama.cpp Commit: $LLAMACPP_COMMIT_HASH"
        
        # Verify archives exist
        ls -la *.zip
        
        # Prepare upload files list
        upload_files=""
        IFS=',' read -ra TARGET_ARRAY <<< "$targets"
        for target in "${TARGET_ARRAY[@]}"; do
          target=$(echo "$target" | xargs) # trim whitespace
          artifact_name="llama-${LLAMACPP_COMMIT_HASH}-win-rocm-${target}-x64"
          if [ -f "${artifact_name}.zip" ]; then
            upload_files="${upload_files} ${artifact_name}.zip"
          fi
        done
        
        echo "Files to upload: $upload_files"
        
        # Create release with GitHub CLI
        gh release create "$TAG" \
          --title "Llama.cpp + ROCm Build $TAG" \
          --notes "**Build Number**: $TAG
        **GPU Target(s)**: $targets
        **ROCm Version**: $ROCM_VERSION
        **Llama.cpp Commit Hash**: $LLAMACPP_COMMIT_HASH
        **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

        This release includes compiled llama.cpp binaries with ROCm support for multiple GPU targets and all essential ROCm runtime DLL files for Windows.

        ## Available Builds:
        $(IFS=','; for target in ${TARGET_ARRAY[@]}; do target=$(echo "$target" | xargs); echo "- llama-${LLAMACPP_COMMIT_HASH}-win-rocm-${target}-x64.zip"; done)" \
          $upload_files