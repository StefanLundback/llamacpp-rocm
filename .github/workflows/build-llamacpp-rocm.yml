name: Build Llama.cpp + ROCm
on:
  workflow_dispatch:
    inputs:
      rocm_version:
        description: 'ROCm version to use (e.g., 7.0.0rc20250711) or "latest" to auto-detect'
        required: false
        default: 'latest'
      gfx_target:
        description: 'AMD GPU target (e.g., gfx1151)'
        required: false
        default: 'gfx1151'
      llamacpp_version:
        description: 'llama.cpp version (e.g., tag, branch, or commit hash) or "latest" for main branch'
        required: false
        default: 'latest'

env:
  HIP_PATH: C:/opt/rocm
  HIP_PLATFORM: amd
  AMDGPU_TARGETS: ${{ github.event.inputs.gfx_target || 'gfx1151' }}
  ROCM_VERSION: ${{ github.event.inputs.rocm_version || 'latest' }}
  LLAMACPP_VERSION: ${{ github.event.inputs.llamacpp_version || 'latest' }}

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Clean up existing directories (safety precaution)
      run: |
        # Remove existing llama.cpp directory if it exists
        if (Test-Path "llama.cpp") {
          Write-Host "Removing existing llama.cpp directory..."
          Remove-Item -Recurse -Force "llama.cpp"
        }
        
        # Remove existing C:\opt\rocm directory if it exists
        if (Test-Path "C:\opt\rocm") {
          Write-Host "Removing existing C:\opt\rocm directory..."
          Remove-Item -Recurse -Force "C:\opt\rocm"
        }
        
        # Remove any existing ROCm tarball
        if (Test-Path "rocm.tar.gz") {
          Write-Host "Removing existing rocm.tar.gz..."
          Remove-Item -Force "rocm.tar.gz"
        }
        
        Write-Host "Cleanup completed successfully"
      
    - name: Install Visual Studio Build Tools
      run: |
        # Download and install Visual Studio Build Tools
        $vsInstallerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
        $vsInstallerPath = "$env:TEMP\vs_buildtools.exe"
        
        Write-Host "Downloading Visual Studio Build Tools..."
        Invoke-WebRequest -Uri $vsInstallerUrl -OutFile $vsInstallerPath
        
        Write-Host "Installing Visual Studio Build Tools..."
        Start-Process -FilePath $vsInstallerPath -ArgumentList "--quiet", "--wait", "--norestart", "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "--add", "Microsoft.VisualStudio.Component.VC.CMake.Project", "--add", "Microsoft.VisualStudio.Component.VC.ATL", "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22621" -Wait
        
        # Clean up installer
        Remove-Item $vsInstallerPath -Force
        
    - name: Install build dependencies with winget
      run: |
        # Install CMake with specific version
        Write-Host "Installing CMake 3.31.0..."
        winget install Kitware.CMake --version 3.31.0 --accept-source-agreements --accept-package-agreements
        
        # Install Ninja
        Write-Host "Installing Ninja..."
        winget install Ninja-build.Ninja --accept-source-agreements --accept-package-agreements
        
        # Install Python
        Write-Host "Installing Python..."
        winget install Python.Python.3.11 --accept-source-agreements --accept-package-agreements
        
        # Install Strawberry Perl
        Write-Host "Installing Strawberry Perl..."
        winget install StrawberryPerl.StrawberryPerl --accept-source-agreements --accept-package-agreements
        
        # Install ccache (if available via winget, otherwise skip)
        Write-Host "Attempting to install ccache..."
        winget install ccache.ccache --accept-source-agreements --accept-package-agreements 2>$null || Write-Host "ccache not available via winget, skipping..."
        
    - name: Refresh environment variables
      run: |
        # Refresh PATH to include newly installed tools
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Verify installations
        Write-Host "Verifying installations..."
        cmake --version
        ninja --version
        python --version
        perl --version
        
    - name: Download ROCm nightly tarball
      run: |
        # Determine ROCm version to use
        $rocmVersion = "${{ env.ROCM_VERSION }}"
        
        if ($rocmVersion -eq "latest") {
          Write-Host "Auto-detecting latest ROCm version for target: ${{ env.AMDGPU_TARGETS }}"
          $s3Response = (Invoke-WebRequest "https://therock-nightly-tarball.s3.amazonaws.com/?prefix=therock-dist-windows-${{ env.AMDGPU_TARGETS }}-").Content
          $latestFile = $s3Response -split '<Key>' | Where-Object {$_ -match '</Key>'} | ForEach-Object { ($_ -split '</Key>')[0] } | Sort-Object | Select-Object -Last 1
          
          if ($latestFile -match "therock-dist-windows-${{ env.AMDGPU_TARGETS }}-(\d+\.\d+\.\d+rc\d+)\.tar\.gz") {
            $rocmVersion = $matches[1]
            Write-Host "Detected latest ROCm version: $rocmVersion"
          } else {
            Write-Error "Failed to extract ROCm version from latest file: $latestFile"
            Write-Error "Expected pattern: therock-dist-windows-${{ env.AMDGPU_TARGETS }}-<version>.tar.gz"
            exit 1
          }
        }
        
        # Store the version for use in other steps
        echo "DETECTED_ROCM_VERSION=$rocmVersion" >> $env:GITHUB_ENV
        
        $rocmUrl = "https://therock-nightly-tarball.s3.amazonaws.com/therock-dist-windows-${{ env.AMDGPU_TARGETS }}-$rocmVersion.tar.gz"
        Write-Host "Downloading ROCm from: $rocmUrl"
        Invoke-WebRequest -Uri $rocmUrl -OutFile "rocm.tar.gz"
        
    - name: Extract ROCm to C:\opt\rocm
      run: |
        # Create directory if it doesn't exist
        New-Item -ItemType Directory -Force -Path "C:\opt\rocm"
        
        # Extract the tarball
        tar -xzf rocm.tar.gz -C C:\opt\rocm --strip-components=1
        
    - name: Clone llama.cpp
      run: |
        git clone https://github.com/ggerganov/llama.cpp.git
        cd llama.cpp
        
        # Checkout specified version
        $llamacppVersion = "${{ env.LLAMACPP_VERSION }}"
        if ($llamacppVersion -eq "latest") {
          Write-Host "Checking out main branch (latest)"
          git checkout main
        } else {
          Write-Host "Checking out llama.cpp version: $llamacppVersion"
          git checkout $llamacppVersion
        }
        
        # Show current commit info
        Write-Host "Current llama.cpp commit:"
        git log --oneline -1
        
    - name: Update HIP version check
      run: |
        cd llama.cpp
        $hipFile = "ggml\src\ggml-cuda\vendors\hip.h"
        if (Test-Path $hipFile) {
          $content = Get-Content $hipFile -Raw
          $updatedContent = $content -replace 'HIP_VERSION >= 70000000', 'HIP_VERSION >= 50600000'
          Set-Content $hipFile $updatedContent -NoNewline
          Write-Host "Updated HIP version check in $hipFile"
        } else {
          Write-Host "Warning: $hipFile not found"
        }
        
    - name: Build Llama.cpp + ROCm
      shell: cmd
      run: |

        REM Set up environment variables and PATH
        set HIP_PATH=C:\opt\rocm
        set HIP_PLATFORM=amd
        set PATH=%HIP_PATH%\lib\llvm\bin;%HIP_PATH%\bin;%PATH%

        REM Set up x64 Native Tools Command Prompt environment
        call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs_path.txt
        set /p VS_PATH=<vs_path.txt
        call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"

        REM Create build directory
        cd llama.cpp
        mkdir build
        cd build

        REM Configure the project
        cmake .. -G Ninja ^
          -DCMAKE_C_COMPILER="C:\opt\rocm\lib\llvm\bin\clang.exe" ^
          -DCMAKE_CXX_COMPILER="C:\opt\rocm\lib\llvm\bin\clang++.exe" ^
          -DCMAKE_CROSSCOMPILING=ON ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DAMDGPU_TARGETS="${{ env.AMDGPU_TARGETS }}" ^
          -DBUILD_SHARED_LIBS=ON ^
          -DLLAMA_BUILD_TESTS=OFF ^
          -DGGML_HIP=ON ^
          -DGGML_OPENMP=OFF ^
          -DGGML_CUDA_FORCE_CUBLAS=OFF ^
          -DGGML_HIP_ROCWMMA_FATTN=OFF ^
          -DGGML_HIP_FORCE_ROCWMMA_FATTN_GFX12=OFF ^
          -DLLAMA_CURL=OFF ^
          -DGGML_NATIVE=OFF ^
          -DGGML_STATIC=OFF ^
          -DCMAKE_SYSTEM_NAME=Windows

        REM Build the project
        cmake --build . -j %NUMBER_OF_PROCESSORS%
        
    - name: List build artifacts
      run: |
        cd llama.cpp\build\bin
        Get-ChildItem -Recurse | Format-Table Name, Length, LastWriteTime
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: llamacpp-rocm-build-${{ env.AMDGPU_TARGETS }}-${{ env.DETECTED_ROCM_VERSION || env.ROCM_VERSION }}-${{ env.LLAMACPP_VERSION }}
        path: llama.cpp/build/bin/
        retention-days: 30
        
    - name: Create release summary
      run: |
        $summary = @"
        # Llama.cpp + ROCm Build Summary
        
        ## Build Configuration
        - **GPU Target**: ${{ env.AMDGPU_TARGETS }}
        - **ROCm Version**: ${{ env.DETECTED_ROCM_VERSION || env.ROCM_VERSION }}
        - **llama.cpp Version**: ${{ env.LLAMACPP_VERSION }}
        - **Build Type**: Release
        - **Platform**: Windows
        
        ## Build Artifacts
        The compiled binaries are available in the build artifacts.

        "@
        
        Set-Content -Path "build-summary.md" -Value $summary
        
    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: build-summary
        path: build-summary.md
        retention-days: 30
        
    - name: Clean up build artifacts and temporary files
      if: always()
      run: |
        Write-Host "Starting cleanup process..."
        
        # Remove ROCm tarball
        if (Test-Path "rocm.tar.gz") {
          Write-Host "Removing rocm.tar.gz..."
          Remove-Item -Force "rocm.tar.gz"
        }
        
        # Remove ROCm installation directory
        if (Test-Path "C:\opt\rocm") {
          Write-Host "Removing C:\opt\rocm directory..."
          Remove-Item -Recurse -Force "C:\opt\rocm"
        }
        # Remove llama.cpp source directory (keeping only the build artifacts)
        if (Test-Path "llama.cpp") {
          Write-Host "Removing llama.cpp source directory..."
          Remove-Item -Recurse -Force "llama.cpp"
        }
        
        # Clean up any temporary build files
        if (Test-Path "build-summary.md") {
          Write-Host "Removing build-summary.md..."
          Remove-Item -Force "build-summary.md"
        }
        
        Write-Host "Cleanup completed successfully" 